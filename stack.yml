Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
                

  LambdaUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaUploadFunction
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Handler: index.upload_file
      Code:
        ZipFile: |
            import logging
            import boto3
            from botocore.exceptions import ClientError
            
            def upload_file(file_name, bucket, object_name=None):
            
                # If S3 object_name was not specified, use file_name
                if object_name is None:
                    object_name = file_name
                    
                # Upload the file
                s3_client = boto3.client('s3')
                try:
                    response = s3_client.upload_file(file_name, bucket, object_name)
                except ClientError as e:
                    logging.error(e)
                    return False
                return True
                
  LambdaDownloadFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaDownloadFunction
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Handler: index.download_file
      Code:
        ZipFile: |
            import boto3
            
            def download_file(bucket, object_name=None, file_name):
            
                # If S3 object_name was not specified, use file_name
                if object_name is None:
                    object_name = file_name
                    
                # Download the file
                s3 = boto3.client('s3')
                try:
                    response = s3.download_file(bucket, object_name, file_name)
                except ClientError as e:
                    logging.error(e)
                    return False
                return True